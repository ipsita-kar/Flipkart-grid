import streamlit as stfrom PIL import Imageimport requestsfrom bs4 import BeautifulSoupimport osimport easyocrimport pickleimport difflib# Load the OCR models (for classification)def load_model(model_path):    with open(model_path, 'rb') as model_file:        return pickle.load(model_file)# Load models for personal care and household itemspersonal_care_model = load_model('personal_care_ocr_model (1).pkl')household_model = load_model('household_ocr_model (1).pkl')# Comprehensive brand and category databrand_dict = {    "Dove": "Dove",    "Nivea": "Personal Care: Skin Care",    "L'Oreal": "Personal Care: Hair Care",    "patanjall": "Personal Care: Ayurvedic Products",    "Colgate": "Oral Care: Toothpaste",    "Ariel": "Household: Laundry Detergent",    "Rin": "Household: Laundry Detergent",    "Vim": "Household: Dishwashing Soap",    "Haldiram's": "Household: Food Products",    "Tata Salt": "Household: Salt",    "Dettol": "Household: Disinfectant",    "Amul": "Food: Dairy Products",    "Fortune": "Food: Cooking Oil",    "Maggi": "Food: Instant Noodles",    # Add more brands as needed...}# Define categories based on the brand dictionarycategory_dict = {    "personal care": ["cream", "moisturizing", "lotion", "shampoo", "soap", "Tooth Paste", "deodorant", "bar"],    "household": ["cleaner", "detergent", "spray", "cooking oil"],    "food": ["salt", "chips", "snacks", "oil", "biscuits", "milk", "yogurt", "cheese", "butter"],    # Add more categories as needed...}# OCR text extraction using EasyOCRdef extract_text(image_path):    reader = easyocr.Reader(['en'])    result = reader.readtext(image_path, detail=0)  # Extract text from image    extracted_text = " ".join(result).lower()  # Convert to lowercase for consistency    return extracted_text# Function to classify text with pre-trained modelsdef classify_text(extracted_text, category):    if category == 'personal care':        prediction = personal_care_model(1).predict([extracted_text])    else:  # 'household'        prediction = household_model(1).predict([extracted_text])    return prediction# Function to match extracted text with known brandsdef identify_brand(extracted_text):    for brand in brand_dict.keys():        # Check for close matches        if difflib.get_close_matches(brand.lower(), [extracted_text], n=1, cutoff=0.6):            return brand, brand_dict[brand]    return None, None# Function to fetch additional details (e.g., calories for food-related items)def fetch_details(item):    try:        url = f'https://www.google.com/search?q={item}'        req = requests.get(url).text        scrap = BeautifulSoup(req, 'html.parser')        details = scrap.find("div", class_="BNeawe iBp4i AP7Wnd").text        return details    except Exception as e:        st.error("Can't fetch additional details.")        print(e)# Main Streamlit app functiondef run():    st.title("Household and Personal Care Item Detection")    # Create the upload directory if it doesn't exist    upload_dir = './uploaded_images'    if not os.path.exists(upload_dir):        os.makedirs(upload_dir)    # Upload image    img_file = st.file_uploader("Choose an Image", type=["jpg", "png", "webp"])    if img_file is not None:        img = Image.open(img_file).resize((250, 250))        st.image(img, use_column_width=False)        save_image_path = os.path.join(upload_dir, img_file.name)        with open(save_image_path, "wb") as f:            f.write(img_file.getbuffer())        # OCR to extract text from image        extracted_text = extract_text(save_image_path)        st.write("Extracted Text: ", extracted_text)  # Debug output for extracted text        # Identify the brand and category        brand, category = identify_brand(extracted_text)        st.write("Brand Identification: ", brand, category)  # Debug output for brand identification        if brand and category:            st.success(f"**Brand Detected:** {brand}")            st.info(f"**Category:** {category}")            # Classify using the pre-trained model            prediction = classify_text(extracted_text, 'personal care' if 'personal' in category.lower() else 'household')            st.write("Model Prediction: ", prediction)            # Fetch additional details if available            details = fetch_details(brand)            if details:                st.warning(f"**Details:** {details}")        else:            st.error("Brand not recognized. Please try with a different image.")if __name__ == "__main__":    run()